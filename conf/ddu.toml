[[plugins]]
repo = '4513echo/ddu-source-source'
lua_add = '''
local c = require('vimrc.command').define
c('DduSourceSource', function()
  require('ddu').start { 'source' }
end)
'''

[[plugins]]
repo = 'kuuote/ddu-filter-fuse'

[[plugins]]
repo = 'kuuote/ddu-source-mr'
lua_add = '''
local m = require('vimrc.compat.map').define

-- ある意味覚えやすくていいマッピング
for _, t in ipairs { 'mru', 'mrw', 'mrr' } do
  m('n', t, function()
    require('ddu').start {
      { name = 'mr', params = { kind = t } },
      name = 'file',
    }
  end)
end
'''

[[plugins]]
repo = 'matsui54/ddu-source-dein_update'
lua_add = '''
local c = require('vimrc.command').define
c('DduDeinUpdate', function()
  require('ddu').start { 'dein_update', name = 'dein_update' }
end)
'''

[[plugins]]
repo = 'matsui54/ddu-source-help'
lua_add = '''
require('vimrc.compat.map').define('n', '<Space>fh', function()
  require('ddu').start { 'help' }
end)
'''

[[plugins]]
repo = 'Shougo/ddu-filter-sorter_alpha'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu-kind-word'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
lua_add = '''
require('vimrc.compat.map').define('n', '<C-p>', function()
  require('ddu').start {
    {
      name = 'file_rec',
      options = {
        path = require('vimrc.util').find_root(),
        sorters = { 'sorter_alpha_path', 'sorter_distance' },
      },
    },
    name = 'file',
  }
end)
'''

[[plugins]]
repo = 'Shougo/ddu-source-file'

[[plugins]]
repo = 'Shougo/ddu-source-line'
lua_add = '''
require('vimrc.compat.map').define('n', '<Space>fl', function()
  require('ddu').start { 'line' }
end)
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
lua_add = '''
local au = require('vimrc.compat.autocmd').define
local aug = require('vimrc.compat.autocmd').group
local cmd = vim.cmd or vim.command
local fn = require('vimrc.compat.convert').fn
local isnvim = vim.fn.has('nvim') == 1
local m = require('vimrc.compat.map').define
local part = require('kutil.function').partition_keyvalue

local do_action = fn['ddu#ui#ff#do_action']

local function action(name)
  return function()
    do_action(name)
  end
end

local function item_action(tbl)
  local args, params = part(tbl)
  params[vim.type_idx] = vim.types.dictionary
  local farg = {
    name = args[1],
    params = params,
  }
  return function()
    do_action('itemAction', farg)
  end
end

au('FileType', {
  pattern = 'ddu-ff',
  callback = function()
    -- カスタムアクションはddu側の設定に書いてる。
    -- see ~/.vim/conf/plug/ddu.lua
    local opts = {
      desc = 'ddu-ui-ff mappings',
      buffer = true,
      nowait = true,
    }
    m('n', '<CR>', action('itemAction'), opts)
    m('n', '<Space>', action('toggleSelectItem'), opts)
    m('n', 'i', action('openFilterWindow'), opts)
    m('n', 'p', action('preview'), opts)
    m('n', 'q', action('quit'), opts)
    if vim.b.ddu_ui_name:match('^file') then
      m('n', 't', item_action { 'open', command = 'tabedit' }, opts)
      m('n', 's', item_action { 'open', command = 'split' }, opts)
      m('n', 'v', item_action { 'open', command = 'vsplit' }, opts)
      m('n', '<C-q>', function()
        do_action('clearSelectAllItems')
        do_action('toggleAllItems')
        item_action { 'quickfix' }()
      end, opts)
    end
    if vim.b.ddu_ui_name:match('^git') then
      m('n', 'c', item_action { 'commit' }, opts)
      m('n', 'h', item_action { 'add' }, opts)
      m('n', 'l', item_action { 'reset' }, opts)
      m('n', 'p', item_action { 'patch' }, opts)
      m('n', 'R', item_action { 'restore' }, opts)
    end
    if isnvim then
      m('n', 'P', function()
        local preview = action('preview')
        local bufnr = vim.api.nvim_get_current_buf()
        local group = 'ddu-ui-auto_action' -- ddu-ui-ffが内部で使っているグループ名
        aug(group, {})
        au('CursorMoved', {
          group = group,
          buffer = 0,
          callback = function()
            preview()
          end,
        })
      end, opts)
    end
  end,
})

au('FileType', {
  pattern = 'ddu-ff-filter',
  callback = function()
    local opts = {
      buffer = true,
      nowait = true,
    }
    m({ 'n', 'i' }, '<CR>', function()
      cmd('stopinsert')
      vim.call('ddu#ui#ff#close')
    end, opts)
    m('i', '<C-j>', function()
      vim.call('ddu#ui#ff#execute', [[call cursor(line('.')+1, 0)]])
      cmd('redraw!')
    end, opts)
    m('i', '<C-k>', function()
      vim.call('ddu#ui#ff#execute', [[call cursor(line('.')-1, 0)]])
      cmd('redraw!')
    end, opts)
    -- for fzf and jis keyboard
    m('i', ':', [[']], { buffer = true })
    -- 'のルール追加するくらいならlexima無効化する
    vim.b.lexima_disabled = true
  end,
})
'''

[[plugins]]
repo = 'Shougo/ddu.vim'
on_func = 'ddu#start'
hook_source = '''
source ~/.vim/conf/plug/ddu.vim
luafile ~/.vim/conf/plug/ddu.lua
'''

[[plugins]]
repo = 'shun/ddu-source-rg'
on_cmd = 'DduRgLive'
lua_source = '''
local vimcall = require('vimrc.compat.convert').call

require('vimrc.compat.autocmd').define('FileType', {
  pattern = 'ddu-ff',
  callback = function()
    if vim.b.ddu_ui_name:match('#rg') then
      require('vimrc.compat.map').define('n', 'm', function()
        require('vimrc.menu').menu {
          info = 'change sorter',
          items = {
            m = {
              info = 'mtime order',
              fn = function()
                vimcall('ddu#ui#ff#do_action', 'updateOptions', {
                  sourceOptions = {
                    rg = {
                      sorters = { 'sorter_alpha_path', 'sorter_mtime' },
                    },
                  },
                })
              end,
            },
          },
        }
      end, {
        desc = 'ddu-source-rg:menu',
        buffer = true,
        nowait = true,
      })
    end
  end,
})
require('vimrc.command').define('DduRgLive', function()
  require('ddu').start {
    {
      name = 'rg',
      params = {
        path = require('vimrc.util').find_root(),
      },
    },
    name = 'file#rg',
    sourceOptions = {
      rg = {
        converters = {},
        matchers = {},
        sorters = { 'sorter_alpha_path' },
      },
    },
    uiParams = {
      ff = {
        ignoreEmpty = false,
        autoResize = false,
      },
    },
    volatile = true,
  }
end)
'''

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'

