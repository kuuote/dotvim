[[plugins]]
repo = '$DOTVIM/bundle/ddc-filter-diff'
merged = 1

[[plugins]]
repo = 'kuuote/ddc-source-suconv'

[[plugins]]
repo = 'kuuote/ddc-source-yank'
hook_add = '''
nnoremap cd <Cmd>call ddc#source#yank#clear()<CR>
nnoremap cy <Cmd>set operatorfunc=ddc#source#yank#register<CR>g@
nnoremap cycy <Cmd>set operatorfunc=ddc#source#yank#register<CR>g@_
onoremap cy <Cmd>set operatorfunc=ddc#source#yank#register<CR>g@
xnoremap Y <Cmd>set operatorfunc=ddc#source#yank#register<CR>g@
'''

[[plugins]]
repo = 'LumaKernel/ddc-source-file'

[[plugins]]
repo = 'matsui54/ddc-buffer'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc-source-around'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'

[[plugins]]
repo = 'Shougo/ddc-source-input'

[[plugins]]
repo = 'Shougo/ddc-source-line'

[[plugins]]
repo = 'Shougo/ddc-source-shell-native'

[[plugins]]
repo = 'Shougo/ddc-ui-native'

[[plugins]]
repo = 'Shougo/ddc-ui-none'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'

[[plugins]]
repo = 'Shougo/ddc.vim'
hook_source = '''
" frontは出現したら何よりも先に選びたいやつ
" 次にバッファ固有の物、その後に通常という戦略で行く
let g:vimrc#ddc_sources = ['around']
let g:vimrc#ddc_sources_front = ['yank', 'file']

call ddc#enable()
call ddc#custom#load_config(expand('$DOTVIM/conf/plug/ddc.ts'))
call ddc#custom#load_config(expand('$DOTVIM/conf/plug/ddc/manual.ts'))
call ddc#custom#patch_global('sources', g:vimrc#ddc_sources_front + g:vimrc#ddc_sources)

autocmd CmdlineEnter : call ddc#enable_cmdline_completion()
autocmd User DenopsPluginPost:ddc call ddc#enable_cmdline_completion()
" 現状呼ばれてないっぽいんで@もついでに呼んでおく
autocmd CmdlineEnter :,@ call ddc#on_event('CmdlineEnter')

" acwriteセットされてるファイルで補完効かなくて困ることは無いと思う
autocmd OptionSet buftype if &buftype ==# 'acwrite' | call ddc#custom#patch_buffer('specialBufferCompletion', v:true) | endif

" deflicker echo area
set noshowmode

" highlight大事
" Numberにしているのはddc-fuzzyより
autocmd ColorScheme * highlight default link PumHighlight Number
'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim']
hook_source = '''
function! s:setup_necovim() abort
  call ddc#custom#patch_filetype(['vim'], 'sources', g:vimrc#ddc_sources_front + ['necovim'] + g:vimrc#ddc_sources)
endfunction
autocmd User vimrc-ddc call s:setup_necovim()
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>

" tnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
" tnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>

call pum#set_option('use_complete', v:true)
set shortmess+=c " suppress 'The only match'
'''
lua_source = '''
local booled = require('vimrc.compat.convert').booled
local condmap = require('vimrc.condmap')
local copy = require('kutil.function').copy
local eval = vim.eval or vim.api.nvim_eval

local function cm(opts)
  opts = copy(opts)
  opts.mode = 'i'
  opts.key = 'pum.vim'
  opts.priority = condmap.prior.completion
  condmap.define(opts)
end

cm {
  lhs = '<Tab>',
  cond = booled(vim.fn['pum#visible']),
  fn = function()
    return eval([["\<Cmd>call pum#map#insert_relative(1)\<CR>"]])
  end,
}

cm {
  lhs = '<S-Tab>',
  cond = booled(vim.fn['pum#visible']),
  fn = function()
    return eval([["\<Cmd>call pum#map#insert_relative(-1)\<CR>"]])
  end,
}

cm {
  lhs = '<CR>',
  cond = booled(vim.fn['pum#entered']),
  fn = function()
    return eval([["\<Cmd>call pum#map#confirm()\<CR>"]])
  end,
}
'''

[[plugins]]
repo = 'takker99/ddc-bitap'

[[plugins]]
repo = 'tani/ddc-fuzzy'

[[plugins]]
repo = 'tani/ddc-onp'

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'

