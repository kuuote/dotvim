[[plugins]]
repo = 'LumaKernel/ddc-file'

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-cmdline'

[[plugins]]
repo = 'Shougo/ddc-line'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc.vim'
hook_source = '''
" frontは出現したら何よりも先に選びたいやつ
" 次にバッファ固有の物、その後に通常という戦略で行く
let g:vimrc#ddc_sources = ['file', 'around', 'buffer']
if has('nvim')
  let g:vimrc#ddc_sources_front = ['tsnip']
else
  let g:vimrc#ddc_sources_front = []
endif
" insert space for paragraph selector
" vip => :!jq -S .
let s:config_json =<< UNKO

{
  "autoCompleteEvents": [
    "InsertEnter",
    "TextChangedI",
    "TextChangedP",
    "CmdlineEnter",
    "CmdlineChanged"
  ],
  "backspaceCompletion": true,
  "completionMenu": "pum.vim",
  "filterParams": {
    "matcher_substring": {
      "highlightMatched": "Number"
    }
  },
  "sourceOptions": {
    "_": {
      "converters": [
        "converter_fuzzy"
      ],
      "ignoreCase": true,
      "matchers": [
        "matcher_fuzzy"
      ],
      "sorters": [
        "sorter_fuzzy"
      ]
    },
    "around": {
      "mark": "A"
    },
    "buffer": {
      "mark": "B"
    },
    "file": {
      "forceCompletionPattern": "\\S/\\S*",
      "isVolatile": true,
      "mark": "F",
      "minAutoCompleteLength": 1000
    },
    "necovim": {
      "mark": "V"
    },
    "nvim-lsp": {
      "forceCompletionPattern": "\\.\\w*|:\\w*|->\\w*",
      "mark": "lsp",
      "minAutoCompleteLength": 1
    },
    "skkeleton": {
      "converters": [],
      "isVolatile": true,
      "mark": "skk",
      "matchers": [
        "skkeleton"
      ],
      "maxCandidates": 50,
      "minAutoCompleteLength": 2,
      "sorters": []
    }
  }
}

UNKO
let g:vimrc#ddc_config = s:config_json->join('')->json_decode()
unlet s:config_json
let g:vimrc#ddc_config['sources'] = g:vimrc#ddc_sources_front + g:vimrc#ddc_sources
call ddc#custom#patch_global(g:vimrc#ddc_config)
autocmd VimEnter * doautocmd <nomodeline> User vimrc-ddc
autocmd VimEnter * call ddc#enable()

autocmd CmdlineEnter : call ddc#enable_cmdline_completion()
'''

[[plugins]]
repo = 'Shougo/neco-vim'
hook_source = '''
function! s:setup_necovim() abort
  call ddc#custom#patch_filetype(['vim', 'toml'], 'sources', g:vimrc#ddc_sources_front + ['necovim'] + g:vimrc#ddc_sources)
endfunction
autocmd User vimrc-ddc call s:setup_necovim()
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_add = '''
inoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
'''

[[plugins]]
repo = 'matsui54/ddc-buffer'

[[plugins]]
repo = 'takker99/ddc-bitap'

[[plugins]]
repo = 'tani/ddc-fuzzy'
