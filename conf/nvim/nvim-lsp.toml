[[plugins]]
repo = 'gamoutatsumi/ddu-source-nvim-lsp'

[[plugins]]
if = 0
repo = 'j-hui/fidget.nvim'
on_event = 'LspAttach'
lua_source = '''
require('fidget').setup {
  text = {
    spinner = 'moon', -- 月が綺麗ですね
  },
}
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'nvim-lspconfig'
hook_source = '''
let g:signature_help_config = {
\   'style': 'virtual',
\ }
call signature_help#enable()
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
lazy = 1
lua_add = '''
vim.api.nvim_create_autocmd({'BufNewFile', 'BufReadPre'}, {
  pattern = {
    '*.go',
    '*.lua',
    '*.rs',
    '*.ts',
    '*.tsx',
  },
  command = 'call dein#source("nvim-lspconfig")',
})
'''
lua_source = '''
local c = require('cmp_nvim_lsp').default_capabilities()
vim.api.nvim_create_autocmd('LspAttach', {
  callback = function()
    local opts = {
      buffer = true,
      noremap = true,
      silent = true,
    }
    vim.keymap.set('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
    vim.keymap.set('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
    vim.keymap.set('n', 'ma', '<Cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    vim.keymap.set('n', 'mf', '<cmd>lua vim.lsp.buf.format()<CR>', opts)
    vim.keymap.set('n', 'mS', function()
      vim.lsp.stop_client(vim.lsp.get_active_clients())
    end, opts)
    vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
    vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)

    -- fzf-preview
    vim.keymap.set('n', 'gd', '<cmd>FzfPreviewNvimLspDefinitionRpc<CR>', opts)
    vim.keymap.set('n', 'mre', '<cmd>FzfPreviewNvimLspReferencesRpc<CR>', opts)
    vim.keymap.set('n', 'md', '<cmd>FzfPreviewNvimLspDiagnosticsRpc<CR>', opts)
  end,
})

local lsp = require('lspconfig')

lsp.lua_ls.setup {
  capabilites = c,
  on_attach = function()
    vim.keymap.set('n', 'mf', '<Cmd>KeepCursor %!stylua -f ~/.vim/stylua.toml -<CR>', {
      buffer = true,
    })
  end,
  settings = {
    Lua = {
      completion = {
        callSnippet = 'Replace',
      },
      diagnostics = {
        globals = { 'vim' },
      },
      runtime = {
        version = 'LuaJIT',
        path = {
          'lua/?.lua',
          'lua/?/init.lua',
        },
      },
      semantic = {
        enable = false,
      },
      telemetry = {
        enable = false,
      },
    },
  },
}

lsp.rust_analyzer.setup {}

lsp.gopls.setup {}

local function handleno(method, if_deno, fallback)
  return function()
    local params = vim.lsp.util.make_position_params()
    local response = vim.lsp.buf_request_sync(0, method, params, 1000)
    vim.pretty_print(response)
    local foundeno = false
    for _, rs in pairs(response) do
      if type(rs.result) == 'table' then
        for _, r in pairs(rs.result) do
          if r.targetUri and r.targetUri:find('deno:') then
            foundeno = true
          end
        end
      end
    end
    return foundeno and if_deno() or fallback()
  end
end

lsp.denols.setup {
  init_options = {
    lint = true,
    unstable = true,
    documentPreloadLimit = 0,
  },
  on_attach = function(client)
    client.server_capabilities.semanticTokensProvider = nil
    local opts = {
      buffer = true,
      noremap = true,
      silent = true,
    }
    vim.keymap.set(
      'n',
      'gd',
      handleno('textDocument/definition', vim.lsp.buf.definition, vim.cmd.FzfPreviewNvimLspDefinitionRpc),
      opts
    )
  end,
  single_file_support = true,
}
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_if = 'dein#is_available("ddc.vim")'
lua_add = '''
vim.api.nvim_create_autocmd('User', {
  pattern = 'vimrc-ddc',
  callback = function()
    local e = vim.list_extend
    local sources = e(e(vim.g['vimrc#ddc_sources_front'], {'nvim-lsp'}), vim.g['vimrc#ddc_sources'])
    vim.call('ddc#custom#patch_filetype', {
      'lua',
      'rust',
      'typescript',
      'typescriptreact',
    }, 'sources', sources)
  end,
})
'''

