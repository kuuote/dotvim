[[plugins]]
repo = 'gamoutatsumi/ddu-source-nvim-lsp'

[[plugins]]
repo = 'j-hui/fidget.nvim'
lua_source = '''
require('fidget').setup {
  text = {
    spinner = 'moon',
  },
}
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
hook_source = '''
let g:signature_help_config = {
\   'style': 'virtual',
\ }
call signature_help#enable()
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
lua_source = '''
vim.api.nvim_create_autocmd('LspAttach', {
  callback = function(args)
    local opts = {
      buffer = true,
      noremap = true,
      silent = true,
    }
    vim.keymap.set('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
    vim.keymap.set('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
    vim.keymap.set('n', 'ma', '<Cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    vim.keymap.set('n', 'mf', '<cmd>lua vim.lsp.buf.format()<CR>', opts)
    vim.keymap.set('n', 'mS', function()
      vim.lsp.stop_client(vim.lsp.get_active_clients())
    end, opts)
  end,
})

local lsp = require('lspconfig')
lsp.denols.setup {
  init_options = {
    lint = true,
    unstable = true,
  },
}

lsp.rust_analyzer.setup {}

'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_if = 'dein#is_available("ddc.vim")'
lua_add = '''
vim.api.nvim_create_autocmd('User', {
  pattern = 'vimrc-ddc',
  callback = function()
    local e = vim.list_extend
    local sources = e(e(vim.g['vimrc#ddc_sources_front'], {'nvim-lsp'}), vim.g['vimrc#ddc_sources'])
    vim.call('ddc#custom#patch_filetype', {
      'go',
      'rust',
      'typescript',
      'typescriptreact',
    }, 'sources', sources)
  end,
})
'''

