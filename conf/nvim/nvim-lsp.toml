[[plugins]]
repo = 'matsui54/denops-signature_help'
hook_source = '''
let g:signature_help_config = {
\   'style': 'virtual',
\ }
call signature_help#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_if = 'dein#is_available("ddc.vim")'
hook_add = '''
let g:vimrc#ddc_source_options['nvim-lsp'] = {
\ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
\ 'mark': 'lsp',
\ 'minAutoCompleteLength': 1
\ }

function! s:setup_ddc_nvim_lsp() abort
  let sources = ['nvim-lsp'] + g:vimrc#ddc_sources_sorted
  call ddc#custom#patch_filetype([
  \ 'go',
  \ 'rust',
  \ 'typescript',
  \ 'typescriptreact',
  \ ], 'sources', sources)
endfunction
autocmd User vimrc-ddc call s:setup_ddc_nvim_lsp()
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_source = '''
lua << unko

local function on_attach(client, bufnr)
  local opts = { noremap=true, silent=true }
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
end

local lsp = require('lspconfig')
lsp.denols.setup({
  on_attach = on_attach,
  init_options = {
    lint = true,
  },
})
unko
'''
