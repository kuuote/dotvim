[[plugins]]
repo = 'hrsh7th/nvim-kit'

[[plugins]]
repo = 'ibhagwan/fzf-lua'
if = 'has("nvim")'
on_cmd = 'FzfLua'
on_lua = 'fzf-lua'

[[plugins]]
repo = 'lewis6991/impatient.nvim'

[[plugins]]
repo = 'monaqa/dial.nvim'
on_map = {"n" = "<Plug>(dial"}
hook_add = '''
" from help
nnoremap <C-a> <Plug>(dial-increment)
nnoremap <C-x> <Plug>(dial-decrement)
xnoremap <C-a> <Plug>(dial-increment)
xnoremap <C-x> <Plug>(dial-decrement)
xnoremap g<C-a> <Plug>(dial-increment-additional)
xnoremap g<C-x> <Plug>(dial-decrement-additional)
'''
lua_source = '''
local augend = require('dial.augend')
require('dial.config').augends:register_group {
  -- グループ名を指定しない場合に用いられる被加数
  default = {
    augend.integer.alias.decimal, -- nonnegative decimal number
    augend.integer.alias.hex, -- nonnegative hex number
    augend.constant.alias.bool,
    -- date (2022/02/19, etc.)
    augend.date.new {
      pattern = '%Y/%m/%d',
      default_kind = 'day',
    },
  },
}
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
on_lua = 'plenary'

[[plugins]]
repo = 'nvim-lua/popup.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope-fzf-native.nvim'
on_source = 'telescope.nvim'
lua_source = '''
require('telescope').setup {
  extensions = {
    fzf = {
      fuzzy = true,
      override_generic_sorter = true,
      override_file_sorter = true,
      case_mode = 'smart_case',
    },
  },
}

require('telescope').load_extension('fzf')
'''

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
on_cmd = 'Telescope'
on_lua = 'telescope'

[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = ['notify', 'vimrc.feat.notify']
lua_source = '''
vim.opt.termguicolors = true
require('vimrc.feat.notify').subscribe(require('notify'))
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
hook_add = '''
command! DeolCurrent execute printf('Deol -cwd=%s', isdirectory(expand('%')) ? expand('%') : getftype(expand('%')) == 'file' ? expand('%:h') : getcwd())
'''
hook_source = '''
if dein#is_available('ddc.vim')
  call ddc#custom#patch_filetype(['deol', 'shell-native'], 'specialBufferCompletion', v:true)
  call ddc#custom#patch_filetype('deol', 'sources', ['shell-native', 'shell-history', 'around'])
  " auto cdはEditバッファのみ有効なのでfileはこちら
  call ddc#custom#patch_filetype('zsh', 'sources', ['file', 'shell-native', 'shell-history'])
endif

autocmd FileType deol tnoremap <buffer> <C-e> <C-\><C-N>G<Cmd>DeolEdit<CR><C-u><Cmd>call feedkeys("cd .\<lt>CR>")<CR>

function! s:deol_ft_zsh() abort
  nnoremap <buffer> <C-e> <Esc><Cmd>close<CR>i
  inoremap <buffer> <C-e> <Esc><Cmd>close<CR>i
endfunction

autocmd FileType zsh if bufname() =~# '^deol-edit' | call s:deol_ft_zsh() | endif
'''

[[plugins]]
repo = 'skanehira/jumpcursor.vim'
on_map = '<Plug>'
hook_add = '''
nnoremap <Space>c <Plug>(jumpcursor-jump)
'''

[[plugins]]
repo = 'stevearc/dressing.nvim'
on_lua = 'dressing'
lua_add = '''
local m = vim.g.vim_ui_select:match('^dressing_(.*)')
if m then
  local dressing_backend = m
  vim.ui.select = function(...)
    if m == 'fzf' then
      vim.call('dein#source', 'fzf')
    end
    require('dressing').setup {
      select = {
        backend = { dressing_backend },
      },
    }
    return vim.ui.select(...)
  end
end
'''

[[plugins]]
repo = 'tamago324/lir.nvim'
on_lua = 'lir'
lua_add = '''
local autocmd = require('vimrc.compat.autocmd')
local group = 'vimrc#lir'
autocmd.group(group, {})
autocmd.define({ 'BufEnter' }, {
  group = group,
  callback = function()
    if vim.fn.isdirectory(vim.fn.expand('%:p')) == 1 then
      autocmd.group(group, {})
      -- dein.vimはVimEnter以降にdein#source()を使用した際
      -- 正規化されたプラグイン名をキーとしてBufEnterを含む一部autocmdを呼び出す
      if vim.fn.has('vim_starting') == 1 then
        require('lir').init()
      else
        -- augroupの名前がlirである限りdein.vimの機構が定義したautocmdを実行する
        -- その際にinit()は呼ばれるので呼ばない
        require('lir')
      end
    end
  end,
})
'''
lua_source = '''
    local lir = require('lir')
    local actions = require('lir.actions')

    lir.setup {
      show_hidden_files = true,
      mappings = {
        ['f'] = function()
          vim.call('vimrc#fzf#ff#run')
        end,
        ['l'] = actions.edit,
        ['<C-s>'] = actions.split,
        ['<C-v>'] = actions.vsplit,
        ['<C-t>'] = actions.tabedit,

        ['h'] = actions.up,
        ['q'] = actions.quit,

        ['K'] = actions.mkdir,
        ['N'] = actions.newfile,
        ['R'] = actions.rename,
        ['@'] = actions.cd,
        ['Y'] = actions.yank_path,
        ['.'] = actions.toggle_show_hidden,
      },
    }
'''

[[plugins]]
repo = 'uga-rosa/ccc.nvim'
on_cmd = 'CccHighlighterEnable'
lua_source = '''
local ccc = require('ccc')

ccc.setup {
  pickers = {
    ccc.picker.hex,
    ccc.picker.css_rgb,
    ccc.picker.css_hsl,
    ccc.picker.css_hwb,
    ccc.picker.css_lab,
    ccc.picker.css_lch,
    ccc.picker.css_oklab,
    ccc.picker.css_oklch,
  },
}
'''

[[plugins]]
repo = 'vim-skk/eskk.vim'
on_func = 'eskk#enable'
lua_add = '''
vim.call('hypermap#map', 'zj', 'eskk#enable()', { eval = true })
'''
lua_source = '''
-- use dotfiles dictionary
vim.g['eskk#dictionary'] = { path = vim.env.HOME .. '/.vim/tmp/.skk-jisyo' }
vim.g['eskk#large_dictionary'] = {
  path = vim.env.HOME .. '/.vim/tmp/.skk-jisyo',
  sorted = true,
  encoding = 'euc-jp',
}

-- improve eskk enabler
-- see https://thinca.hatenablog.com/entry/20120716/1342374586
-- inoremap <expr> <script> f getline('.')[col('.') - 2] ==# 'j' ? "\<BS>" .. eskk#enable() : 'f'
vim.call('hypermap#map', 'zj', 'eskk#enable()', { eval = true })

vim.api.nvim_create_autocmd('User', {
  pattern = 'eskk-enable-post',
  callback = function()
    vim.keymap.set('l', 'l', '<Plug>(eskk:disable)', {
      buffer = vim.fn.bufnr(),
    })
  end,
})
'''
hook_add = '''
"register alphabet table
function! s:eskk_initialize_pre()
  let t = eskk#table#new('rom_to_hira*', 'rom_to_hira')
  call t.add_map('z ', '　')
  call eskk#register_mode_table('hira', t)
endfunction

augroup vimrc
  autocmd User eskk-initialize-pre call s:eskk_initialize_pre()
augroup END
'''

[[plugins]]
repo = 'yuki-yano/highlight-undo.nvim'
# undoしたくなるのは変更の後
on_event = ['TextChanged', 'TextChangedI']
lua_source = '''
require('highlight-undo').setup {}
'''

[[plugins]]
repo = 'yuki-yano/tsnip.nvim'
on_cmd = ['TSnip', 'TSnipSelect']
on_event = 'InsertEnter'
denops_wait = 0
lua_source = '''
local vimx = require('artemis')

-- vim.g.tsnip_use_nui = false
vim.api.nvim_create_user_command('TSnipSelect', function()
  local items = vimx.fn.denops.request('tsnip', 'items', {})
  local names = vim.iter(items)
  :map(function(item)
    return item.word
  end)
  :totable()
  vim.ui.select(names, {}, function(name)
    if name == nil then
      return
    end
    vimx.cmd.startinsert()
    vimx.create_autocmd('ModeChanged', {
      pattern = '*:i',
      once = true,
      callback = function()
        vim.fn.timer_start(0, function()
        vimx.cmd.TSnip(name)
        end)
      end,
    })
  end)
end, {})
'''

