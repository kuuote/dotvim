[[plugins]]
repo = '~/.vim/bundle/cmp-line'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-buffer'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
on_lua = 'cmp_nvim_lsp'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-path'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/cmp-vsnip'
on_source = 'nvim-cmp'

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
on_lua = 'cmp'
on_cmd = 'Cmp'
lua_source = '''
local cmp = require('cmp')

-- Global setup.
cmp.setup {
  enabled = function()
    if vim.g.cmp then
      return true
    end
    return false
  end,
  snippet = {
    expand = function(args)
      vim.fn['vsnip#anonymous'](args.body) -- For `vsnip` users.
    end,
  },
  window = {
    completion = cmp.config.window.bordered {
      border = 'single',
    },
    documentation = cmp.config.window.bordered {
      border = 'single',
    },
  },
  mapping = cmp.mapping.preset.insert {
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
  },
}

cmp.setup.cmdline(':', {
  mapping = cmp.mapping.preset.cmdline(),
})

require('vimrc.plug.cmp').change_sources('default')

local condmap = require('vimrc.condmap')

condmap.define {
  mode = 'i',
  lhs = '<CR>',
  key = 'cmp',
  cond = cmp.get_active_entry,
  priority = condmap.prior.completion,
  fn = function()
    return vim.api.nvim_eval([["\<Cmd>lua require('cmp').confirm()\<CR>"]])
  end,
}

condmap.define {
  mode = 'i',
  lhs = '<Tab>',
  key = 'cmp',
  cond = cmp.visible,
  priority = condmap.prior.completion,
  fn = function()
    return vim.api.nvim_eval([["\<Cmd>lua require('cmp').select_next_item()\<CR>"]])
  end,
}
'''

[[plugins]]
repo = 'uga-rosa/cmp-skkeleton'
on_source = 'nvim-cmp'

