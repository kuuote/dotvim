[[plugins]]
repo = '$VIMDIR/bundle/vim-operandi'
on_func = ['operandi#']
hook_add = '''
nnoremap <Space><Space> <Cmd>call operandi#open('mycommand')<CR>
'''

[[plugins]]
repo = 'lambdalisue/gin.vim'
on_cmd = [
  'Gin',
]

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = ['Gina']

[[plugins]]
repo = 'lambdalisue/mr.vim'
lazy = 1
hook_add = '''
autocmd BufReadPre * call mr#mru#start_recording()
autocmd BufReadPre * call mr#mrr#start_recording()
autocmd BufWritePre * call mr#mrw#start_recording()
'''
hook_source = '''
let g:loaded_mr = 1
let g:mr#mru#filename = '/data/mr/mru'
let g:mr#mrw#filename = '/data/mr/mrw'
let g:mr#mrr#filename = '/data/mr/mrr'
'''

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_cmd = ['SudaRead', 'SudaWrite']

[[plugins]]
repo = 'machakann/vim-sandwich'
#on_map = ['s']
lazy = 1
hook_add = '''
nnoremap s <Cmd>call vimrc#lazy#on_map('s', 'vim-sandwich')<CR>
autocmd ModeChanged *:*[ovV\x16]* ++once ++nested call dpp#source('vim-sandwich')
'''
hook_source = '''
" https://github.com/yuki-yano/dotfiles/blob/f1b6ac0c2a178177cc546bab19a175a498192e1e/.vim/lua/plugins/coding.lua#L485-L487
" saa( などで空白を含めないようにするやつ
call operator#sandwich#set('add', 'char', 'skip_space', 1)
autocmd ModeChanged [vV\x16]*:* call operator#sandwich#set('add', 'char', 'skip_space', 1)
autocmd ModeChanged *:[vV\x16]* call operator#sandwich#set('add', 'char', 'skip_space', 0)
'''
# lua_post_source = '''
# local vimx = require('artemis')
# -- https://github.com/yuki-yano/dotfiles/blob/f1b6ac0c2a178177cc546bab19a175a498192e1e/.vim/lua/plugins/coding.lua#L451-L458
# -- console.log() などをまとめて指定できるやつ
# vimx.g['sandwich#magicchar#f#patterns'] = {
#   {
#     header = [[\<\%(\h\k*\.\)*\h\k*]],
#     bra = '(',
#     ket = ')',
#     footer = '',
#   },
# }
# '''

[[plugins]]
repo = 'rbtnn/vim-layout'
on_cmd = ['LayoutLoad', 'LayoutSave']
on_func = ['layout#']

[[plugins]]
repo = 'tani/vim-artemis'

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]]
repo = 'uga-rosa/denippet.vim'
lazy = 1
denops_wait = 0
hook_add = '''
autocmd CmdlineEnter,InsertEnter * call dpp#source('denippet.vim')
'''
hook_source = '''
call denippet#load('/data/dotvim/snippets/typescript.json')
'''

[[plugins]]
repo = 'vim-skk/skkeleton'
lazy = 1
denops_wait = 0
hook_add = '''
noremap! ;<Space> <Cmd>call dpp#source('skkeleton')<CR><Plug>(skkeleton-enable)
" ref: atusy: normal modeの `<C-J>`をskkeleton-enableにあてちゃうのアリな気がしてきた。特にmarkdownで日本語書きまくってる時とか。"
nnoremap ;<Space> <Cmd>call dpp#source('skkeleton')<CR>i<Plug>(skkeleton-enable)
'''
hook_source = '''
autocmd User skkeleton-initialize-pre ++nested source $VIMDIR/conf/plug/skkeleton.vim
'''
# /data/newvim/old/conf/plug/skkeleton.lua
#hook_source = '''
#autocmd User DenopsPluginPost:skkeleton call skkeleton#initialize()
#autocmd User skkeleton-enable-pre call s:skkeleton_pre()
#function! s:skkeleton_pre() abort
#  if dein#is_sourced('ddc.vim')
#    let b:skkeleton_ddc_backup = ddc#custom#get_buffer()
#    let sources = get(b:, 'skkeleton_ddc_sources', ['skkeleton'])
#    call ddc#custom#patch_buffer('sources', sources)
#    call ddc#custom#patch_buffer('specialBufferCompletion', v:true)
#  endif
#  if dein#is_sourced('nvim-cmp')
#    lua require('vimrc.plug.cmp').change_sources('skkeleton')
#  endif
#endfunction
#autocmd User skkeleton-disable-pre call s:skkeleton_post()
#function! s:skkeleton_post() abort
#  " Restore current sources
#  if exists('b:skkeleton_ddc_backup')
#    call ddc#custom#set_buffer(b:skkeleton_ddc_backup)
#  endif
#  if dein#is_sourced('nvim-cmp')
#    lua require('vimrc.plug.cmp').change_sources('default')
#  endif
#endfunction
#function! s:tsuki() abort
#  lua require('vimrc.plug.skkeleton.tsuki2-263mod')()
#  tabedit
#  setlocal buftype=nofile bufhidden=hide noswapfile
#  call setline(1, readfile(expand('$DOTVIM/lua/vimrc/plug/skkeleton/tsukimod.txt')))
#  vsplit
#endfunction
#command! SKKTsuki call s:tsuki()
#function s:azik() abort
#  call skkeleton#azik#add_table('us')
#  call skkeleton#config(#{kanaTable: 'azik'})
#  " https://github.com/NI57721/dotfiles/blob/79d2decf4b1e2bf5522c3af5f0ffdefd87b7ff50/.config/vim/vimrc#L378
#  " sticky keyが無いと生きていけない
#  call skkeleton#register_keymap('input', ';', 'henkanPoint')
#  call skkeleton#register_kanatable('azik', #{l: ['っ', '']})
#  call skkeleton#register_kanatable('azik', #{q: 'katakana'})
#  call skkeleton#register_kanatable('azik', {':': 'disable'})
#  call skkeleton#register_kanatable('azik', {"'": 'disable'})
#endfunction
#command! SKKAzik call s:azik()
#
#'''

